# -*- coding: utf-8 -*-
#
#   TOPPERS/HRP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       High Reliable system Profile Kernel
# 
#   Copyright (C) 2016-2019 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
# 

#
#		リンカスクリプト（section.clnkとsection.src）の生成
#

#
#  生成するファイルの指定
#
$sectionClnk = GenFile.new("section.clnk")
$sectionCsv = GenFile.new("section.csv")
$sectionCsv.add("label,section,is_end,end_align")

#
#  ラベルのプリフックス
#
$PREFIX_START = $asmLabel + "__start_"
$PREFIX_END = $asmLabel + "__end_"
$PREFIX_AEND = $asmLabel + "__aend_"

#
#  セクションとメモリ保護のアライン単位
#  （-nostuffオプション使用の場合）
#
$TARGET_SEC_ALIGN = 4
$TARGET_MP_ALIGN = 16

#
#  メモリリージョン毎に対して必要な情報を生成
#  （標準ROMは一番最後に処理を行う）
#
aRegionKeys = $cfgData[:ATT_REG].keys
aRegionKeys.delete($commonMemreg[:stdrom])
aRegionKeys.push($commonMemreg[:stdrom])
sStdRomSections = ''
sStdRomOption = ''
sAlignedSection = ''
aRegionKeys.each{|memreg|
  sections = ''
  $memObj.each{|key, params|
    # （リンカが配置する）セクションの場合
    next unless params[:linker]
    next unless params[:memreg] == memreg
    sSecName = params[:secname]

    # dataセクションの初期値を置くセクションを標準ROM内に作成
    if !params[:nowrite] && (params[:mematr] & $TA_MEMINI) != 0
      sRomSecName = sSecName
      sSecName = "R_#{params[:secname]}"
      if sStdRomSections == ''
        # 一つ目の初期値セクションのアライメントを指定
        sAlignedSection += "#{sRomSecName},"
      end
      sStdRomSections += "#{sRomSecName},"
      sStdRomOption += "#{sRomSecName}=#{sSecName},"
      if params[:SEC_LAST] && params.has_key?(:ILABEL)
        $sectionCsv.add("#{$PREFIX_START}#{params[:ILABEL]},#{sRomSecName},0")
      end
    end

    sections += "#{sSecName},"
    sAlignedSection += "#{sSecName}," if params[:MP_TOP]

    # 先頭ラベルの生成
    aStartLabels = []    
    aStartLabels.push(params[:SRPWLABEL]) if params[:SRPW_TOP]
    aStartLabels.push(params[:PLABEL]) if params[:MP_TOP]
    aStartLabels.push(params[:MLABEL]) if params[:MO_TOP]
    aStartLabels.push(params[:SLABEL]) if params[:SEC_TOP]
    aStartLabels.uniq.each{|sLabel|
      $sectionCsv.add("#{$PREFIX_START}#{sLabel},#{sSecName},0")
    }
    
    # 終了ラベルの生成
    aEndLabels = []
    aEndLabels.push(params[:SLABEL]) if params[:SEC_LAST]
    aEndLabels.push(params[:MLABEL]) if params[:MO_LAST]
    aEndLabels.uniq.each{|sLabel|
      $sectionCsv.add("#{$PREFIX_END}#{sLabel},#{sSecName},1,1")
    }
    
    # アラインした終了ラベルの生成
    nAlign = (params[:MP_LAST] ? $TARGET_MP_ALIGN : $TARGET_SEC_ALIGN) 
    aAendLabels = []    
    aAendLabels.push(params[:MLABEL]) if params[:MO_LAST]
    aAendLabels.push(params[:PLABEL]) if params[:MP_LAST]
    aAendLabels.push(params[:SRPWLABEL]) if params[:SRPW_LAST]
    aAendLabels.uniq.each{|sLabel|
      $sectionCsv.add("#{$PREFIX_AEND}#{sLabel},#{sSecName},1,#{nAlign}")
    }  
  }
  
  if memreg == $commonMemreg[:stdrom]
    # 標準ROMの場合、領域の最後に初期化データ用セクションを追加
    sections = sections + sStdRomSections
    # 必要に応じて、-romオプションを出力
    if sStdRomOption != ''
      $sectionClnk.add("-rom=#{sStdRomOption.chop}")
    end
  end
  
  if sections != ''
    base = $cfgData[:ATT_REG][memreg][:base].val
    size = $cfgData[:ATT_REG][memreg][:size].val
    type = ((($cfgData[:ATT_REG][memreg][:regatr] & $TA_NOWRITE) == 0) ? 'RAM' : 'ROM')

    $sectionClnk.add("-start=#{sections.chop}/#{base.to_s(16)}")
    $sectionClnk.add("-cpu=#{type}=#{base.to_s(16)}-#{(base+size-1).to_s(16)}")
  end
}
# EXTBASE用アドレス範囲
$sectionClnk.add("-cpu=ROM=ffffff80-ffffffff")

if sAlignedSection != ''
  $sectionClnk.add("-aligned_section=#{sAlignedSection.chop}")
end
