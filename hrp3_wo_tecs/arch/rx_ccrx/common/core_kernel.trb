# -*- coding: utf-8 -*-
#
#   TOPPERS/HRP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       Advanced Standard Profile Kernel
# 
#   Copyright (C) 2015-2019 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 

#
#		パス2の生成スクリプトのコア依存部（RX用）
#

#
#  空のセクションに関する処理
#
$sectionMapFileName = SearchFilePath('section.map')
$bOmitEmptySection = !$sectionMapFileName.nil?

def TargetMemoryObject()
  # ATT_MODにより生成されたメモリオブジェクトを修正
  $memObj.each{|_, params|
    if params[:type] == :ATTMOD
      # モジュール名をセクション名の末尾に追加
      params[:secname] = params[:secname] + '_' + params[:modname].strip.split('.')[0]
    end
  }

  # パス2一回目の場合、これ以降の処理をskip
  return if !$bOmitEmptySection

  # パス2一回目のmapファイルから空のセクションを取得
  aEmptySections = []
  File.readlines($sectionMapFileName).each{|line|
    if line.start_with?('W0561100:Cannot find ')
      section = line.gsub(/W0561100:Cannot find "(.+?)" specified in option.*/, '\1').strip
      aEmptySections.push(section) if !section.start_with?('R_')
    end
  }

  # ATT_SECとATT_MODにより生成された空のセクションを削除
  $memObj.delete_if{|_, params|
    aEmptySections.delete(params[:secname])
  }

  # 全ての空のセクションは削除されたはず、念のためチェックする
  raise unless aEmptySections.length == 0

  # 最後に登録したメモリオブジェクトのキーを更新
  $lastMOKey = $memObj.keys.last
end

#
#  有効なCPU例外ハンドラ番号
#
$EXCNO_VALID = [ 20, 21, 23, 25, 30, 31 ]

IncludeTrb("rx_mpu_lib.trb")

#
#  標準のセクションの定義
#
$defaultSections = [
  { SECNAME: "P_OBJ", MEMREG: :stdrom, MEMATR: $mematrTextSec },
  { SECNAME: "C_OBJ", MEMREG: :stdrom, MEMATR: $mematrRodataSec },
  { SECNAME: "D_OBJ", MEMREG: :stdram, MEMATR: $mematrDataSec },
  { SECNAME: "B_OBJ", MEMREG: :stdram, MEMATR: $mematrBssSec },
  { SECNAME: "L_OBJ", MEMREG: :stdrom, MEMATR: $mematrRodataSec },
  { SECNAME: "W_OBJ", MEMREG: :stdrom, MEMATR: $mematrRodataSec }
]

#
#  ユーザスタック領域のセクション名と確保方法
#
def SecnameUserStack(tskid)
  return("B_USTACK_#{tskid}")
end

def AllocUserStack(stack, size, secname)
  ustksz = (size + $CHECK_USTKSZ_ALIGN - 1) & ~($CHECK_USTKSZ_ALIGN - 1)
  $kernelCfgC.add("#pragma section B #{secname}")
  $kernelCfgC.add("static STK_T #{stack}[COUNT_STK_T(#{ustksz})];")
  $kernelCfgC.add("#pragma section")
  return("ROUND_STK_T(#{ustksz})")
end

#
#  固定長メモリプール領域のセクション名と確保方法
#
def SecnameUserMempfix(mpfid)
  return("B_MPF_#{mpfid}")
end

def AllocUserMempfix(mpf, blkcnt, blksz, secname)
  $kernelCfgC.add("#pragma section B #{secname}")
  $kernelCfgC.add("static MPF_T #{mpf}[(#{blkcnt}) * COUNT_MPF_T(#{blksz})];")
  $kernelCfgC.add("#pragma section")
end

#
#  ターゲット非依存部のインクルード
#
IncludeTrb("kernel/kernel.trb")

# 
# 割込み番号から割込み優先度及び属性を取り出すテーブル
# 
INTNO_RANGE = (0..$TMAX_INTNO)
$kernelCfgC.comment_header("Interrupt Level and Attribute Table")
$kernelCfgC.add("const CFG_INT_INFO _kernel_cfg_int_table[#{INTNO_RANGE.size}] = {")
INTNO_RANGE.each do |intno|
  if $cfgData[:CFG_INT].has_key?(intno)
    intpri = -$cfgData[:CFG_INT][intno][:intpri]
  else
    intpri = "0"
  end
  $kernelCfgC.add("\t{ #{intpri} }, /* #{intno} */")  
end
$kernelCfgC.add2("};")

if $TOPPERS_ML_AUTO
  #
  #  自動メモリ配置の場合
  #

  #
  #  仮MPU情報の生成
  #
  $kernelMemC.add(<<EOS)
const MPU_INFO _kernel_mpu_info_table[MPU_INFO_TABLE_SIZE] = {{0, 0}};
const uint8_t _kernel_shared_mpu_num = 1U;
const uint8_t _kernel_max_domain_mpu_num = 1U;
EOS

  #
  #  リンカスクリプトの生成
  #
  IncludeTrb("arch/ccrx/linker.trb")
else
  GenerateMpuInfoTable()
end

# 
#  アセンブラ出力ファイル
# 

kernelCfgAsm = GenFile.new("kernel_cfg_asm.src")

kernelCfgAsm.add(<<EOS)
;
;  CCRX用出力ファイル
;
;  割込みベクタ及び割込みハンドラ定義
;
EOS

# 
#  共通関数の宣言
# 

kernelCfgAsm.add(<<EOS)
	.section P_OBJ_libkernel, CODE
	.glb	_start
	.glb	_kernel_interrupt
	.glb	_kernel_exception
	.glb	_kernel_service_call
	.glb	__kernel_default_exc_handler
EOS

#
#  未登録の割込みのデバッグ設定
#
DEBUG_UNREG_INT = true
if not DEBUG_UNREG_INT
  kernelCfgAsm.add(<<EOS)
	.glb	__kernel_default_int_handler
	.glb	__kernel_default_int_handler_entry
__kernel_default_int_handler_entry:
	pushm	r1-r7								; スクラッチレジスタとr6-r7をタスクスタックへ退避
	mov.l	#0FFFFFFFFH, r6						; 割込みハンドラ番号をr6へ
	mov.l	#__kernel_default_int_handler, r7	; ハンドラのアドレスをr7へ
	bra.a	_kernel_interrupt					; 共通ルーチンへ
EOS
end

# 
#  割込みハンドラの出力
# 
INHNO_RANGE = INTNO_RANGE
INHNO_RANGE.each do |inhno|
  inthdr = nil
  if $cfgData[:DEF_INH].has_key?(inhno)
    inh = $cfgData[:DEF_INH][inhno]
    if inh[:inhatr] & $TA_NONKERNEL == 0
      inthdr = "_#{inh[:inthdr]}"
    end
  elsif DEBUG_UNREG_INT
    inthdr = "__kernel_default_int_handler"
  end
  if inthdr && inhno != $SVC_SERVICE_CALL && inhno != $SVC_SCYCOVR
    kernelCfgAsm.add(<<EOS)
	.glb	#{inthdr}
	.glb	__kernel#{inthdr}_#{inhno}_entry
__kernel#{inthdr}_#{inhno}_entry:
	pushm	r1-r7						; スクラッチレジスタとr6-r7をタスクスタックへ退避
	mov.l	##{inhno}, r6			; 割込みハンドラ番号をr6へ
	mov.l	##{inthdr}, r7		; ハンドラのアドレスをr7へ
	bra.a	_kernel_interrupt			; 共通ルーチンへ
EOS
  end
end

#
# 未登録CPU例外ハンドラ入口処理
#
DEBUG_UNREG_EXC = true
if not DEBUG_UNREG_EXC
  kernelCfgAsm.add(<<EOS)
	.glb	__kernel_default_exc_handler_entry
__kernel_default_exc_handler_entry:
	pushm	r1-r7								; スクラッチレジスタとr6-r7をタスクスタックへ退避
	mov.l	#0FFFFFFFFH, r6						; CPU例外ハンドラ番号をr6へ
	mov.l	#__kernel_default_exc_handler, r7	; ハンドラのアドレスをr7へ
	bra.a	_kernel_exception					; 共通ルーチンへ
EOS
end

# 
#  CPU例外ハンドラ入口処理
#
$EXCNO_VALID.each do |excno|
  exchdr = nil
  if $cfgData[:DEF_EXC].has_key?(excno)
    exc = $cfgData[:DEF_EXC][excno]
    exchdr = "_#{exc[:exchdr]}"
  elsif (excno == $EXCNO_SCYCOVR) || DEBUG_UNREG_EXC
    exchdr = "__kernel_default_exc_handler"
  end

  next if !exchdr
  if excno == $EXCNO_SCYCOVR
    entry = "_kernel_scyovr_handler"
  else
    entry = "__kernel#{exchdr}_#{excno}_entry"
  end

  kernelCfgAsm.add(<<EOS)
	.glb	#{exchdr}
	.glb	#{entry}
#{entry}:
	pushm	r1-r7						; スクラッチレジスタとr6-r7をタスクスタックへ退避
	mov.l	##{excno}, r6			; CPU例外ハンドラ番号をr6へ
	mov.l	##{exchdr}, r7		; ハンドラのアドレスをr7へ
	bra.a	_kernel_exception			; 共通ルーチンへ
EOS
end

# 
#  割込みベクタテーブル
# 

kernelCfgAsm.add(<<EOS)
;
;  割込みベクタテーブル
;
EOS

INHNO_RANGE.each do |inhno|
  if $cfgData[:DEF_INH].has_key?(inhno)
    inh = $cfgData[:DEF_INH][inhno]
    if inh[:inhatr] & $TA_NONKERNEL != 0
      kernelCfgAsm.add("\t.glb	_#{inh[:inthdr]}")
    end
  end
end
kernelCfgAsm.add

kernelCfgAsm.add(<<EOS)
	.section C$VECT, ROMDATA
	.glb VVECTOR_TOP
VVECTOR_TOP:
vvector_table:
EOS
INHNO_RANGE.each do |inhno|
  if inhno == $SVC_SERVICE_CALL
    kernelCfgAsm.add("\t.lword\t_kernel_service_call		; SVC_SERVICE_CALL")
    next
  end
  if inhno == $SVC_SCYCOVR
    kernelCfgAsm.add("\t.lword\t_kernel_scyovr_handler		; SVC_SCYCOVR")
    next
  end
  
  inhhdr = "_kernel_default_int_handler_entry"
  if $cfgData[:DEF_INH].has_key?(inhno)
    inh = $cfgData[:DEF_INH][inhno]
    if inh[:inhatr] & $TA_NONKERNEL == 0
      inhhdr = "_kernel_#{inh[:inthdr]}_#{inhno}_entry"
    else
      inhhdr = inh[:inthdr]
    end
  elsif DEBUG_UNREG_INT
    inhhdr = "_kernel__kernel_default_int_handler_#{inhno}_entry"
  end
  kernelCfgAsm.add("\t.lword\t_#{inhhdr}		; #{inhno}")
end
kernelCfgAsm.add

# 
#  例外ベクタテーブル
# 
exchdr = {}
$EXCNO_VALID.each do |excno|
  if $cfgData[:DEF_EXC].has_key?(excno)
    exc = $cfgData[:DEF_EXC][excno]
    exchdr[excno] = "_kernel_#{exc[:exchdr]}_#{excno}_entry"
  elsif DEBUG_UNREG_EXC
    exchdr[excno] = "_kernel__kernel_default_exc_handler_#{excno}_entry"
  else
    exchdr[excno] = "_kernel_default_exc_handler_entry"
  end
end

kernelCfgAsm.add(<<EOS)
;
;  例外ベクタテーブル（EXTBのデフォルト位置FFFFFF80hに固定）
;
	.section EXTBASE, ROMDATA
	.org 0FFFFFF80H + 050H
	.lword _#{exchdr[20]}	; 20: 特権命令例外
	.org 0FFFFFF80H + 054H
	.lword _#{exchdr[21]}	; 21: アクセス例外
	.org 0FFFFFF80H + 05CH
	.lword _#{exchdr[23]}	; 23: 未定義命令例外
	.org 0FFFFFF80H + 064H
	.lword _#{exchdr[25]}	; 25: 浮動小数点例外
	.org 0FFFFFF80H + 078H
	.lword _#{exchdr[30]}	; 30: ノンマスカブル割り込み
	; 0FFFFFFFFCH
	.lword _start			; リセット
EOS

kernelCfgAsm.add("\t.end")
